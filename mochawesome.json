{
  "stats": {
    "suites": 7,
    "tests": 43,
    "passes": 16,
    "pending": 0,
    "failures": 14,
    "testsRegistered": 43,
    "passPercent": 37.2093023255814,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 13,
    "hasSkipped": true,
    "start": "2025-01-02T17:29:57.691Z",
    "end": "2025-01-02T17:32:19.447Z",
    "duration": 141756
  },
  "results": [
    {
      "uuid": "8539dbd8-ad26-4f71-b6bb-73435137573b",
      "title": "",
      "fullFile": "cypress\\e2e\\forgetPassword.cy.js",
      "file": "cypress\\e2e\\forgetPassword.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "934df5da-b6ec-4a8b-9314-75cb1534cb05",
          "title": "Reset Password successfully",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Reset Password successfully",
              "fullTitle": "Reset Password successfully Reset Password successfully",
              "timedOut": null,
              "duration": 4970,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@data\").then(data => {\n  _forgetPasswordPage.forgetPasswordPage.typeEmail(data.valid.email).clickSubmit();\n  _forgetPasswordPage.resetPasswordPage.inputResetPassword(data.valid.password, data.valid.confirmPassword).clickResetPassword();\n  _loginPage.loginPage.isNotificationCorrect(data.valid.message).inputSignIn(data.valid.email, data.valid.password).clickLogin();\n  _navBar.navBar.isUserNameCorrect(data.valid.name);\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Reset Password' within the element: <a> but never did.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Reset Password successfully`",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Reset Password' within the element: <a> but never did.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Reset Password successfully`\n    at Object.clickResetPassword (webpack://e2e_automationtest/./cypress/pages/loginPage.js:38:20)\n    at Context.eval (webpack://e2e_automationtest/./cypress/e2e/forgetPassword.cy.js:10:18)",
                "diff": null
              },
              "uuid": "447c7e89-aa59-46c8-a4ce-bfbea13ea4d5",
              "parentUUID": "934df5da-b6ec-4a8b-9314-75cb1534cb05",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "447c7e89-aa59-46c8-a4ce-bfbea13ea4d5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4970,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c83db15f-9e43-4ec9-abe5-17c919434780",
          "title": "Can not Reset Password",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Empty email",
              "fullTitle": "Can not Reset Password Empty email",
              "timedOut": null,
              "duration": 4332,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_forgetPasswordPage.forgetPasswordPage.typeEmail(data.email).clickSubmit();\nif (data.error.errorField == \"toastify\") {\n  _forgetPasswordPage.forgetPasswordPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _forgetPasswordPage.forgetPasswordPage.checkErrorMessage(data.error.errorMessage);\n}",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Reset Password' within the element: <a> but never did.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Can not Reset Password`",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Reset Password' within the element: <a> but never did.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Can not Reset Password`\n    at Object.clickResetPassword (webpack://e2e_automationtest/./cypress/pages/loginPage.js:38:20)\n    at Context.eval (webpack://e2e_automationtest/./cypress/e2e/forgetPassword.cy.js:39:18)",
                "diff": null
              },
              "uuid": "4a30cac2-959f-4d8f-9271-dcb2d7ae33b8",
              "parentUUID": "c83db15f-9e43-4ec9-abe5-17c919434780",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Non-existed account",
              "fullTitle": "Can not Reset Password Non-existed account",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_forgetPasswordPage.forgetPasswordPage.typeEmail(data.email).clickSubmit();\nif (data.error.errorField == \"toastify\") {\n  _forgetPasswordPage.forgetPasswordPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _forgetPasswordPage.forgetPasswordPage.checkErrorMessage(data.error.errorMessage);\n}",
              "err": {},
              "uuid": "bba1b43c-8122-4a65-947e-a81068fd316b",
              "parentUUID": "c83db15f-9e43-4ec9-abe5-17c919434780",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Invalid Email",
              "fullTitle": "Can not Reset Password Invalid Email",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_forgetPasswordPage.forgetPasswordPage.typeEmail(data.email).clickSubmit();\nif (data.error.errorField == \"toastify\") {\n  _forgetPasswordPage.forgetPasswordPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _forgetPasswordPage.forgetPasswordPage.checkErrorMessage(data.error.errorMessage);\n}",
              "err": {},
              "uuid": "74f9561b-edf8-4003-b4dd-b67e3d5036ee",
              "parentUUID": "c83db15f-9e43-4ec9-abe5-17c919434780",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Invalid Email",
              "fullTitle": "Can not Reset Password Invalid Email",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_forgetPasswordPage.forgetPasswordPage.typeEmail(data.email).clickSubmit();\nif (data.error.errorField == \"toastify\") {\n  _forgetPasswordPage.forgetPasswordPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _forgetPasswordPage.forgetPasswordPage.checkErrorMessage(data.error.errorMessage);\n}",
              "err": {},
              "uuid": "8b7a4e2e-1920-45e5-a09f-f68afc434506",
              "parentUUID": "c83db15f-9e43-4ec9-abe5-17c919434780",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Invalid Email",
              "fullTitle": "Can not Reset Password Invalid Email",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_forgetPasswordPage.forgetPasswordPage.typeEmail(data.email).clickSubmit();\nif (data.error.errorField == \"toastify\") {\n  _forgetPasswordPage.forgetPasswordPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _forgetPasswordPage.forgetPasswordPage.checkErrorMessage(data.error.errorMessage);\n}",
              "err": {},
              "uuid": "fba5768f-cebe-4a97-9132-01e2cb15cd8a",
              "parentUUID": "c83db15f-9e43-4ec9-abe5-17c919434780",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Empty password",
              "fullTitle": "Can not Reset Password Empty password",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_forgetPasswordPage.forgetPasswordPage.typeEmail(data.email).clickSubmit();\n_forgetPasswordPage.resetPasswordPage.inputResetPassword(data.password, data.confirmPassword).clickResetPassword();\nif (data.error.errorField == \"toastify\") {\n  _forgetPasswordPage.resetPasswordPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _forgetPasswordPage.resetPasswordPage.checkErrorMessage(data.error.errorMessage);\n}",
              "err": {},
              "uuid": "44dff5e3-6e50-4f40-bc79-eea9834cf274",
              "parentUUID": "c83db15f-9e43-4ec9-abe5-17c919434780",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Invalid password",
              "fullTitle": "Can not Reset Password Invalid password",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_forgetPasswordPage.forgetPasswordPage.typeEmail(data.email).clickSubmit();\n_forgetPasswordPage.resetPasswordPage.inputResetPassword(data.password, data.confirmPassword).clickResetPassword();\nif (data.error.errorField == \"toastify\") {\n  _forgetPasswordPage.resetPasswordPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _forgetPasswordPage.resetPasswordPage.checkErrorMessage(data.error.errorMessage);\n}",
              "err": {},
              "uuid": "f682dc42-f12a-4faa-8263-e23a0764ea27",
              "parentUUID": "c83db15f-9e43-4ec9-abe5-17c919434780",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Password does not match Confirm password",
              "fullTitle": "Can not Reset Password Password does not match Confirm password",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_forgetPasswordPage.forgetPasswordPage.typeEmail(data.email).clickSubmit();\n_forgetPasswordPage.resetPasswordPage.inputResetPassword(data.password, data.confirmPassword).clickResetPassword();\nif (data.error.errorField == \"toastify\") {\n  _forgetPasswordPage.resetPasswordPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _forgetPasswordPage.resetPasswordPage.checkErrorMessage(data.error.errorMessage);\n}",
              "err": {},
              "uuid": "9b094f48-d6de-40e1-bef6-85afbc283081",
              "parentUUID": "c83db15f-9e43-4ec9-abe5-17c919434780",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4a30cac2-959f-4d8f-9271-dcb2d7ae33b8"
          ],
          "pending": [],
          "skipped": [
            "bba1b43c-8122-4a65-947e-a81068fd316b",
            "74f9561b-edf8-4003-b4dd-b67e3d5036ee",
            "8b7a4e2e-1920-45e5-a09f-f68afc434506",
            "fba5768f-cebe-4a97-9132-01e2cb15cd8a",
            "44dff5e3-6e50-4f40-bc79-eea9834cf274",
            "f682dc42-f12a-4faa-8263-e23a0764ea27",
            "9b094f48-d6de-40e1-bef6-85afbc283081"
          ],
          "duration": 4332,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "dab5e9e7-8f2b-4205-99d4-f517df01f03c",
      "title": "",
      "fullFile": "cypress\\e2e\\login.cy.js",
      "file": "cypress\\e2e\\login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "89d1ee90-7a9f-433e-8492-713a6e4aac45",
          "title": "Sign In successfully",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Sign In with valid account",
              "fullTitle": "Sign In successfully Sign In with valid account",
              "timedOut": null,
              "duration": 1576,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@data\").then(data => {\n  _loginPage.loginPage.inputSignIn(data.valid.email, data.valid.password).clickLogin();\n  _navBar.navBar.isUserNameCorrect(data.valid.name);\n});",
              "err": {
                "message": "TypeError: _navBar.navBar.isUserNameCorrect is not a function",
                "estack": "TypeError: _navBar.navBar.isUserNameCorrect is not a function\n    at Context.eval (webpack://e2e_automationtest/./cypress/e2e/login.cy.js:19:19)",
                "diff": null
              },
              "uuid": "dd87fdee-32bb-411a-9044-2cd11a7632f8",
              "parentUUID": "89d1ee90-7a9f-433e-8492-713a6e4aac45",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "dd87fdee-32bb-411a-9044-2cd11a7632f8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1576,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "488bbdbf-224a-4853-86e2-7ad0906d68c3",
          "title": "Can not Sign In with invalid account",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Empty field",
              "fullTitle": "Can not Sign In with invalid account Empty field",
              "timedOut": null,
              "duration": 975,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginPage.loginPage.inputSignIn(data.email, data.password).clickLogin();\nif (data.error.errorField == \"toastify\") {\n  _loginPage.loginPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _loginPage.loginPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {},
              "uuid": "ed07c5d7-579d-4672-b4e7-a38b84bbe455",
              "parentUUID": "488bbdbf-224a-4853-86e2-7ad0906d68c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty password",
              "fullTitle": "Can not Sign In with invalid account Empty password",
              "timedOut": null,
              "duration": 1357,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginPage.loginPage.inputSignIn(data.email, data.password).clickLogin();\nif (data.error.errorField == \"toastify\") {\n  _loginPage.loginPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _loginPage.loginPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {},
              "uuid": "a97823dc-2a78-4cf1-942b-8376b12f2691",
              "parentUUID": "488bbdbf-224a-4853-86e2-7ad0906d68c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Non-existed account",
              "fullTitle": "Can not Sign In with invalid account Non-existed account",
              "timedOut": null,
              "duration": 1521,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginPage.loginPage.inputSignIn(data.email, data.password).clickLogin();\nif (data.error.errorField == \"toastify\") {\n  _loginPage.loginPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _loginPage.loginPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {},
              "uuid": "79e630e6-8c3c-4151-aaf8-11c3cdf96197",
              "parentUUID": "488bbdbf-224a-4853-86e2-7ad0906d68c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Incorrect Password",
              "fullTitle": "Can not Sign In with invalid account Incorrect Password",
              "timedOut": null,
              "duration": 1545,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginPage.loginPage.inputSignIn(data.email, data.password).clickLogin();\nif (data.error.errorField == \"toastify\") {\n  _loginPage.loginPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _loginPage.loginPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {},
              "uuid": "0a971a56-3db3-4734-9e68-8ed818dfd5ee",
              "parentUUID": "488bbdbf-224a-4853-86e2-7ad0906d68c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid Email Format",
              "fullTitle": "Can not Sign In with invalid account Invalid Email Format",
              "timedOut": null,
              "duration": 1376,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginPage.loginPage.inputSignIn(data.email, data.password).clickLogin();\nif (data.error.errorField == \"toastify\") {\n  _loginPage.loginPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _loginPage.loginPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {},
              "uuid": "8086df37-3a39-410d-b352-65863171548f",
              "parentUUID": "488bbdbf-224a-4853-86e2-7ad0906d68c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid Email Format",
              "fullTitle": "Can not Sign In with invalid account Invalid Email Format",
              "timedOut": null,
              "duration": 1485,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_loginPage.loginPage.inputSignIn(data.email, data.password).clickLogin();\nif (data.error.errorField == \"toastify\") {\n  _loginPage.loginPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _loginPage.loginPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {
                "message": "AssertionError: expected '' to include 'Please match the requested format.'",
                "estack": "AssertionError: expected '' to include 'Please match the requested format.'\n    at Context.eval (webpack://e2e_automationtest/./cypress/pages/loginPage.js:59:51)",
                "diff": null
              },
              "uuid": "f4cee060-29ac-47d5-ba43-f73367491f6b",
              "parentUUID": "488bbdbf-224a-4853-86e2-7ad0906d68c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid Email Format",
              "fullTitle": "Can not Sign In with invalid account Invalid Email Format",
              "timedOut": null,
              "duration": 1257,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_loginPage.loginPage.inputSignIn(data.email, data.password).clickLogin();\nif (data.error.errorField == \"toastify\") {\n  _loginPage.loginPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _loginPage.loginPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {},
              "uuid": "e647fb5f-3bea-4a0e-a72a-47c6f23927c4",
              "parentUUID": "488bbdbf-224a-4853-86e2-7ad0906d68c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed07c5d7-579d-4672-b4e7-a38b84bbe455",
            "a97823dc-2a78-4cf1-942b-8376b12f2691",
            "79e630e6-8c3c-4151-aaf8-11c3cdf96197",
            "0a971a56-3db3-4734-9e68-8ed818dfd5ee",
            "8086df37-3a39-410d-b352-65863171548f",
            "e647fb5f-3bea-4a0e-a72a-47c6f23927c4"
          ],
          "failures": [
            "f4cee060-29ac-47d5-ba43-f73367491f6b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9516,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b21384a8-8a87-49f4-b49f-e4c6c6322f2f",
      "title": "",
      "fullFile": "cypress\\e2e\\markAsDelivered.cy.js",
      "file": "cypress\\e2e\\markAsDelivered.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e05d6cc0-93bf-4da1-b110-1234dfc11d9d",
          "title": "Mark as delivered Successfully",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Admin can mark as delivered successfully",
              "fullTitle": "Mark as delivered Successfully Admin can mark as delivered successfully",
              "timedOut": null,
              "duration": 12413,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@listOrderID\").then(ids => {\n  let id = ids.valid[1].orderID; //order is paid, and not deliverd\n  _orderHistoryPage.orderHistoryPage.clickViewOrderDetail(id);\n  cy.wait(500);\n  _orderDetailPage.orderDetailPage.isOrderPaid().isOrderNotDelivered().clickMarkAsDelivered().isOrderDelivered();\n  cy.wait(500);\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<div.fade.alert.alert-success.show>' to contain 'Not Delivered'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<div.fade.alert.alert-success.show>' to contain 'Not Delivered'\n    at Object.isOrderNotDelivered (webpack://e2e_automationtest/./cypress/pages/orderDetailPage.js:48:72)\n    at Context.eval (webpack://e2e_automationtest/./cypress/e2e/markAsDelivered.cy.js:36:17)",
                "diff": null
              },
              "uuid": "cf0bb0cb-352d-42d8-be19-8c7828973783",
              "parentUUID": "e05d6cc0-93bf-4da1-b110-1234dfc11d9d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cf0bb0cb-352d-42d8-be19-8c7828973783"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12413,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e4efa011-b0bd-4116-ac84-262a247e0d33",
          "title": "Can not mark as delivered",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "For an order is Not Paid",
              "fullTitle": "Can not mark as delivered For an order is Not Paid",
              "timedOut": null,
              "duration": 8575,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@accounts\").then(accounts => {\n  let account = accounts.admin;\n  _navBar.navBar.clickSignIn();\n  cy.wait(500);\n  _loginPage.loginPage.inputSignIn(account.email, account.password).clickLogin();\n  cy.wait(500);\n});\n_navBar.navBar.clickAdminMenu().clickOrders();\ncy.wait(3000);\ncy.get(\"@listOrderID\").then(ids => {\n  let id = ids.valid[2].orderID; //order is not paid\n  _orderHistoryPage.orderHistoryPage.clickViewOrderDetail(id);\n  cy.wait(500);\n  _orderDetailPage.orderDetailPage.isOrderNotPaid().isOrderNotDelivered().isBtnMarkAsDeliverdDisappeared();\n  cy.wait(500);\n});",
              "err": {},
              "uuid": "b1f2c626-e2d5-4482-a4ad-27c375706efc",
              "parentUUID": "e4efa011-b0bd-4116-ac84-262a247e0d33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "For an order that has already been delivered",
              "fullTitle": "Can not mark as delivered For an order that has already been delivered",
              "timedOut": null,
              "duration": 8199,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@accounts\").then(accounts => {\n  let account = accounts.admin;\n  _navBar.navBar.clickSignIn();\n  cy.wait(500);\n  _loginPage.loginPage.inputSignIn(account.email, account.password).clickLogin();\n  cy.wait(500);\n});\n_navBar.navBar.clickAdminMenu().clickOrders();\ncy.wait(3000);\ncy.get(\"@listOrderID\").then(ids => {\n  let id = ids.valid[0].orderID; //order has been delivered\n  _orderHistoryPage.orderHistoryPage.clickViewOrderDetail(id);\n  cy.wait(500);\n  _orderDetailPage.orderDetailPage.isOrderDelivered().isBtnMarkAsDeliverdDisappeared();\n  cy.wait(500);\n});",
              "err": {},
              "uuid": "607bac47-5265-475d-9b22-4927a6dfab7f",
              "parentUUID": "e4efa011-b0bd-4116-ac84-262a247e0d33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Customer can not mark as delivered",
              "fullTitle": "Can not mark as delivered Customer can not mark as delivered",
              "timedOut": null,
              "duration": 8062,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@accounts\").then(accounts => {\n  let account = accounts.valid;\n  _navBar.navBar.clickSignIn();\n  cy.wait(500);\n  _loginPage.loginPage.inputSignIn(account.email, account.password).clickLogin();\n  cy.wait(500);\n});\n//go to user profile -> order detail\n_navBar.navBar.clickNavDropDown().clickUserProfile();\ncy.wait(3000);\ncy.get(\"@listOrderID\").then(ids => {\n  let id = ids.valid[3].orderID; //order is paid, and not deliverd\n  _orderHistoryPage.orderHistoryPage.clickViewOrderDetail(id);\n  cy.wait(500);\n  _orderDetailPage.orderDetailPage.isOrderPaid().isOrderNotDelivered().isBtnMarkAsDeliverdDisappeared();\n  cy.wait(500);\n});",
              "err": {},
              "uuid": "ae37d354-3bb8-4551-9fab-334e26aecaed",
              "parentUUID": "e4efa011-b0bd-4116-ac84-262a247e0d33",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1f2c626-e2d5-4482-a4ad-27c375706efc",
            "607bac47-5265-475d-9b22-4927a6dfab7f",
            "ae37d354-3bb8-4551-9fab-334e26aecaed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24836,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3f1ec2fa-ebca-4f0b-9a2e-054f36af4575",
      "title": "",
      "fullFile": "cypress\\e2e\\paymentProcess.cy.js",
      "file": "cypress\\e2e\\paymentProcess.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e38958ca-7d05-459f-a4c8-bb6674bd1e63",
          "title": "Pay an order Successfully",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "with Valid PayPal account",
              "fullTitle": "Pay an order Successfully with Valid PayPal account",
              "timedOut": null,
              "duration": 10832,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"payment\").as(\"payPalAccount\");\ncy.fixture(\"listOrderID\").as(\"orderIDs\");\ncy.get(\"@orderIDs\").then(orderIDs => {\n  let orderID = orderIDs.valid[1].orderID;\n  _navBar.navBar.clickNavDropDown().clickUserProfile();\n  cy.wait(2000);\n  cy.log;\n  _orderHistoryPage.orderHistoryPage.clickViewOrderDetail(orderID);\n});\ncy.get(\"@payPalAccount\").then(payPalAccount => {\n  let ppAccount = payPalAccount.valid;\n  _payOrder.payOrder.payOrder(ppAccount);\n  _orderDetailPage.orderDetailPage.isOrderPaid();\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<div.fade.alert.alert-success.show>' to contain 'Not Paid'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<div.fade.alert.alert-success.show>' to contain 'Not Paid'\n    at Object.isOrderNotPaid (webpack://e2e_automationtest/./cypress/pages/orderDetailPage.js:38:78)\n    at Object.payOrder (webpack://e2e_automationtest/./cypress/pages/payOrder.js:26:24)\n    at Context.eval (webpack://e2e_automationtest/./cypress/e2e/paymentProcess.cy.js:38:17)",
                "diff": null
              },
              "uuid": "5975df72-0da0-4008-aa99-8963b80e03c4",
              "parentUUID": "e38958ca-7d05-459f-a4c8-bb6674bd1e63",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5975df72-0da0-4008-aa99-8963b80e03c4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10832,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8a2c2466-5a09-4d74-b927-3556f409c520",
      "title": "",
      "fullFile": "cypress\\e2e\\placeOrder.cy.js",
      "file": "cypress\\e2e\\placeOrder.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3d241e92-17ae-439a-9031-beb451d629c8",
          "title": "Place Order Successfully",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Place order successfully",
              "fullTitle": "Place Order Successfully Place order successfully",
              "timedOut": null,
              "duration": 16067,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@order\").then(orders => {\n  let order = orders.valid[0];\n  for (let i = 0; i < order.orderItems.length; i++) {\n    _productListPage.productListPage.clickProduct(order.orderItems[i]);\n    _productDetailPage.productDetailPage.clickAddToCart();\n    if (i != order.orderItems.length - 1) {\n      _productListPage.productListPage.clickBrand();\n    }\n  }\n  _cartPage.cartPage.clickPlaceOrder();\n  cy.wait(1000);\n  _loginPage.loginPage.typeUsername(order.user.email).typePassword(order.user.password).clickLogin();\n  cy.wait(1000);\n  _placeOrderPage.placeOrderPage.inputOrder(order).isOrderCorrect(order).clickPlaceOrderBtn();\n  cy.wait(1000);\n  cy.log(\"check order details after placed\");\n  _orderDetailPage.orderDetailPage.isOrderDetailCorrect(order);\n  cy.get('h1').then($e => {\n    let orderId = $e.text();\n    orderId = orderId.replace('Order ', '');\n    cy.log(\"get after order\", orderId);\n    _navBar.navBar.clickNavDropDown().clickUserProfile();\n    cy.wait(3000);\n    _orderHistoryPage.orderHistoryPage.isOrderDisplayedCorrectly(orderId).clickViewOrderDetail(orderId);\n    cy.wait(500);\n    _orderDetailPage.orderDetailPage.isOrderIdCorrect(orderId);\n    // placeOrderPage.isOrderCorrect(order);\n  });\n});",
              "err": {},
              "uuid": "0edfeb5a-a714-4d87-b404-5d966130a43b",
              "parentUUID": "3d241e92-17ae-439a-9031-beb451d629c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Can place order when editing cart",
              "fullTitle": "Place Order Successfully Can place order when editing cart",
              "timedOut": null,
              "duration": 9585,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@order\").then(orders => {\n  let order = orders.valid[0];\n  //login\n  _navBar.navBar.clickSignIn();\n  _loginPage.loginPage.typeUsername(order.user.email).typePassword(order.user.password).clickLogin();\n  cy.wait(1000);\n  //add 2 item\n  for (let i = 0; i < order.orderItems.length; i++) {\n    _productListPage.productListPage.clickProduct(order.orderItems[i]);\n    _productDetailPage.productDetailPage.clickAddToCart();\n    if (i != order.orderItems.length - 1) {\n      _productListPage.productListPage.clickBrand();\n    }\n  }\n  //remove 1 item\n  _cartPage.cartPage.clickRemoveProduct(order.orderItems[0].name);\n  cy.wait(1000);\n  //change quantity\n  _cartPage.cartPage.changeQuantity(order.orderItems[1], 2);\n  cy.wait(1000);\n  //check out and order\n  _cartPage.cartPage.clickPlaceOrder();\n  cy.wait(1000);\n  _placeOrderPage.placeOrderPage.inputOrder(order).clickPlaceOrderBtn();\n  cy.wait(1000);\n  //check order details after placed\n  _orderDetailPage.orderDetailPage.isOrderDetailCorrect(orders.valid[2]);\n});",
              "err": {},
              "uuid": "ed93e3a5-a62d-43a9-aa4f-bc32e8a2ad68",
              "parentUUID": "3d241e92-17ae-439a-9031-beb451d629c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0edfeb5a-a714-4d87-b404-5d966130a43b",
            "ed93e3a5-a62d-43a9-aa4f-bc32e8a2ad68"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25652,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4495bd44-3b00-4e14-a6b0-e516264fb44a",
          "title": "Can not place order",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "when removing all products from cart",
              "fullTitle": "Can not place order when removing all products from cart",
              "timedOut": null,
              "duration": 4731,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@order\").then(orders => {\n  let order = orders.valid[0];\n  for (let i = 0; i < order.orderItems.length; i++) {\n    _productListPage.productListPage.clickProduct(order.orderItems[i]);\n    _productDetailPage.productDetailPage.clickAddToCart();\n    if (i == 0) {\n      _productListPage.productListPage.clickBrand();\n    }\n  }\n  _cartPage.cartPage.clickRemoveAllProduct().isCartEmpty();\n});",
              "err": {},
              "uuid": "00ac2fdf-b371-40a6-967c-e1b11900219b",
              "parentUUID": "4495bd44-3b00-4e14-a6b0-e516264fb44a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty Address",
              "fullTitle": "Can not place order Empty Address",
              "timedOut": null,
              "duration": 3070,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//add 1 item to cart\n_productListPage.productListPage.clickProduct(order.valid[1].orderItems[0]);\n_productDetailPage.productDetailPage.clickAddToCart();\n_cartPage.cartPage.clickPlaceOrder();\n_placeOrderPage.placeOrderPage.typeShippingInfo(data).clickBtnContinue().checkErrorMessage(data.error.errorMessage, data.error.errorField);",
              "err": {},
              "uuid": "149510eb-2bf7-4956-afa3-d60aae50143d",
              "parentUUID": "4495bd44-3b00-4e14-a6b0-e516264fb44a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty City",
              "fullTitle": "Can not place order Empty City",
              "timedOut": null,
              "duration": 3107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//add 1 item to cart\n_productListPage.productListPage.clickProduct(order.valid[1].orderItems[0]);\n_productDetailPage.productDetailPage.clickAddToCart();\n_cartPage.cartPage.clickPlaceOrder();\n_placeOrderPage.placeOrderPage.typeShippingInfo(data).clickBtnContinue().checkErrorMessage(data.error.errorMessage, data.error.errorField);",
              "err": {},
              "uuid": "e05c28ce-bafb-4500-8bd1-189fced59dd1",
              "parentUUID": "4495bd44-3b00-4e14-a6b0-e516264fb44a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty PostalCode",
              "fullTitle": "Can not place order Empty PostalCode",
              "timedOut": null,
              "duration": 3090,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//add 1 item to cart\n_productListPage.productListPage.clickProduct(order.valid[1].orderItems[0]);\n_productDetailPage.productDetailPage.clickAddToCart();\n_cartPage.cartPage.clickPlaceOrder();\n_placeOrderPage.placeOrderPage.typeShippingInfo(data).clickBtnContinue().checkErrorMessage(data.error.errorMessage, data.error.errorField);",
              "err": {},
              "uuid": "dfc761d3-d082-4ba5-94a6-d533ad9efd11",
              "parentUUID": "4495bd44-3b00-4e14-a6b0-e516264fb44a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty Country",
              "fullTitle": "Can not place order Empty Country",
              "timedOut": null,
              "duration": 3039,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//add 1 item to cart\n_productListPage.productListPage.clickProduct(order.valid[1].orderItems[0]);\n_productDetailPage.productDetailPage.clickAddToCart();\n_cartPage.cartPage.clickPlaceOrder();\n_placeOrderPage.placeOrderPage.typeShippingInfo(data).clickBtnContinue().checkErrorMessage(data.error.errorMessage, data.error.errorField);",
              "err": {},
              "uuid": "ae900813-0bf1-4843-a15b-f7b3bc876200",
              "parentUUID": "4495bd44-3b00-4e14-a6b0-e516264fb44a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00ac2fdf-b371-40a6-967c-e1b11900219b",
            "149510eb-2bf7-4956-afa3-d60aae50143d",
            "e05c28ce-bafb-4500-8bd1-189fced59dd1",
            "dfc761d3-d082-4ba5-94a6-d533ad9efd11",
            "ae900813-0bf1-4843-a15b-f7b3bc876200"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17037,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "12e5cee2-50f3-448f-8fbf-89daed3613af",
      "title": "",
      "fullFile": "cypress\\e2e\\signup.cy.js",
      "file": "cypress\\e2e\\signup.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4caea606-3bf2-4549-acde-c722ee1896f7",
          "title": "Sign up successfully",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Sign Up with valid account",
              "fullTitle": "Sign up successfully Sign Up with valid account",
              "timedOut": null,
              "duration": 4920,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@data\").then(data => {\n  _signupPage.signupPage.inputSignUp(data.valid.name, data.valid.email, data.valid.password, data.valid.confirmPassword).clickSignUp();\n  _navBar.navBar.isUserNameCorrect(data.valid.name);\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Create your account' within the element: <a> but never did.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Sign up successfully`",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Create your account' within the element: <a> but never did.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Sign up successfully`\n    at Object.clickSignUp (webpack://e2e_automationtest/./cypress/pages/loginPage.js:33:20)\n    at Context.eval (webpack://e2e_automationtest/./cypress/e2e/signup.cy.js:10:18)",
                "diff": null
              },
              "uuid": "14c52fd4-48a9-4fbc-bfde-ae9a3e0217c3",
              "parentUUID": "4caea606-3bf2-4549-acde-c722ee1896f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "14c52fd4-48a9-4fbc-bfde-ae9a3e0217c3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4920,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b8dc3e90-0710-4e70-bd47-8114efedf749",
          "title": "Can not Sign Up with invalid account",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Empty field",
              "fullTitle": "Can not Sign Up with invalid account Empty field",
              "timedOut": null,
              "duration": 4422,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_signupPage.signupPage.inputSignUp(data.name, data.email, data.password, data.confirmPassword).clickSignUp();\nif (data.error.errorField == \"toastify\") {\n  _signupPage.signupPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _signupPage.signupPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Create your account' within the element: <a> but never did.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Can not Sign Up with invali...`",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Create your account' within the element: <a> but never did.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Can not Sign Up with invali...`\n    at Object.clickSignUp (webpack://e2e_automationtest/./cypress/pages/loginPage.js:33:20)\n    at Context.eval (webpack://e2e_automationtest/./cypress/e2e/signup.cy.js:30:18)",
                "diff": null
              },
              "uuid": "8943b38a-da81-46e4-92e0-3c678abcfc93",
              "parentUUID": "b8dc3e90-0710-4e70-bd47-8114efedf749",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Existed Email",
              "fullTitle": "Can not Sign Up with invalid account Existed Email",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_signupPage.signupPage.inputSignUp(data.name, data.email, data.password, data.confirmPassword).clickSignUp();\nif (data.error.errorField == \"toastify\") {\n  _signupPage.signupPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _signupPage.signupPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {},
              "uuid": "55e56bb8-60ee-4692-aadd-3711ac1985fc",
              "parentUUID": "b8dc3e90-0710-4e70-bd47-8114efedf749",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Invalid Email: missing @",
              "fullTitle": "Can not Sign Up with invalid account Invalid Email: missing @",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_signupPage.signupPage.inputSignUp(data.name, data.email, data.password, data.confirmPassword).clickSignUp();\nif (data.error.errorField == \"toastify\") {\n  _signupPage.signupPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _signupPage.signupPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {},
              "uuid": "d7955e43-4332-46a1-88fb-6e3d590f5634",
              "parentUUID": "b8dc3e90-0710-4e70-bd47-8114efedf749",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Invalid Email: missing .com",
              "fullTitle": "Can not Sign Up with invalid account Invalid Email: missing .com",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_signupPage.signupPage.inputSignUp(data.name, data.email, data.password, data.confirmPassword).clickSignUp();\nif (data.error.errorField == \"toastify\") {\n  _signupPage.signupPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _signupPage.signupPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {},
              "uuid": "cb55281a-1c21-4235-a9e3-b52aaa5670ed",
              "parentUUID": "b8dc3e90-0710-4e70-bd47-8114efedf749",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Invalid Email: missing path",
              "fullTitle": "Can not Sign Up with invalid account Invalid Email: missing path",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_signupPage.signupPage.inputSignUp(data.name, data.email, data.password, data.confirmPassword).clickSignUp();\nif (data.error.errorField == \"toastify\") {\n  _signupPage.signupPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _signupPage.signupPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {},
              "uuid": "1c61c3e7-0466-4477-a819-4426ffa32b4c",
              "parentUUID": "b8dc3e90-0710-4e70-bd47-8114efedf749",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Invalid password: not have required length",
              "fullTitle": "Can not Sign Up with invalid account Invalid password: not have required length",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_signupPage.signupPage.inputSignUp(data.name, data.email, data.password, data.confirmPassword).clickSignUp();\nif (data.error.errorField == \"toastify\") {\n  _signupPage.signupPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _signupPage.signupPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {},
              "uuid": "9b2c5b3e-b544-404d-b4f0-f4dfe75af12b",
              "parentUUID": "b8dc3e90-0710-4e70-bd47-8114efedf749",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Password does not match Confirm Password",
              "fullTitle": "Can not Sign Up with invalid account Password does not match Confirm Password",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_signupPage.signupPage.inputSignUp(data.name, data.email, data.password, data.confirmPassword).clickSignUp();\nif (data.error.errorField == \"toastify\") {\n  _signupPage.signupPage.isNotificationCorrect(data.error.errorMessage).clickCloseToastifyButton();\n} else {\n  _signupPage.signupPage.checkErrorMessage(data.error.errorMessage, data.error.errorField);\n}",
              "err": {},
              "uuid": "466fee38-4dde-48f8-91b8-e3ad40653052",
              "parentUUID": "b8dc3e90-0710-4e70-bd47-8114efedf749",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8943b38a-da81-46e4-92e0-3c678abcfc93"
          ],
          "pending": [],
          "skipped": [
            "55e56bb8-60ee-4692-aadd-3711ac1985fc",
            "d7955e43-4332-46a1-88fb-6e3d590f5634",
            "cb55281a-1c21-4235-a9e3-b52aaa5670ed",
            "1c61c3e7-0466-4477-a819-4426ffa32b4c",
            "9b2c5b3e-b544-404d-b4f0-f4dfe75af12b",
            "466fee38-4dde-48f8-91b8-e3ad40653052"
          ],
          "duration": 4422,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "7efc001c-9a65-4f48-8bb5-298ec97b155b",
      "title": "",
      "fullFile": "cypress\\e2e\\cart.cy.js",
      "file": "cypress\\e2e\\cart.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e1f38681-9bc0-4111-ae6e-61cfe1414a31",
          "title": "Add To Cart Successfully",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Add to cart from Home",
              "fullTitle": "Add To Cart Successfully Add to cart from Home",
              "timedOut": null,
              "duration": 1429,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@products\").then(products => {\n  let productList = products.inStockProduct;\n  var totalPrice = 0;\n  var totalProduct = 0;\n  for (let index = 0; index < productList.length; index++) {\n    const product = productList[index];\n    totalPrice = totalPrice + product.quantity * product.price;\n    for (let i = 0; i < product.quantity; i++) {\n      _productListPage.productListPage.clickAddProductToCart(product.name);\n      totalProduct = totalProduct + 1;\n      cy.wait(500);\n      _navBar.navBar.isProductCountInCartCorrect(totalProduct);\n    }\n  }\n  _navBar.navBar.clickViewCart();\n  cy.wait(1000);\n  for (let index = 0; index < productList.length; index++) {\n    const product = productList[index];\n    _cartPage.cartPage.isProductAddedCorrect(product, product.quantity);\n  }\n  _cartPage.cartPage.isTotalCountCorrect(totalProduct, totalPrice);\n});",
              "err": {
                "message": "TypeError: _productListPage.productListPage.clickAddProductToCart is not a function",
                "estack": "TypeError: _productListPage.productListPage.clickAddProductToCart is not a function\n    at Context.eval (webpack://e2e_automationtest/./cypress/e2e/cart.cy.js:24:36)",
                "diff": null
              },
              "uuid": "bc481ff2-df46-4565-b6a8-9f3a2e5a3695",
              "parentUUID": "e1f38681-9bc0-4111-ae6e-61cfe1414a31",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add to cart from Product Detail",
              "fullTitle": "Add To Cart Successfully Add to cart from Product Detail",
              "timedOut": null,
              "duration": 359,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@products\").then(products => {\n  let productList = products.inStockProduct;\n  var totalPrice = 0;\n  var totalProduct = 0;\n  for (let index = 0; index < productList.length; index++) {\n    const product = productList[index];\n    let countProduct = 0;\n    for (let i = 0; i < product.quantity; i++) {\n      _productListPage.productListPage.clickProduct(product.name);\n      cy.wait(500);\n      _productDetailPage.productDetailPage.clickAddToCart();\n      countProduct = countProduct + 1;\n      totalProduct = totalProduct + 1;\n      totalPrice = totalPrice + product.price;\n      cy.wait(500);\n      _cartPage.cartPage.isProductAddedCorrect(product, countProduct).isTotalCountCorrect(totalProduct, totalPrice);\n      _navBar.navBar.isProductCountInCartCorrect(totalProduct).clickGoToHome();\n      cy.wait(500);\n    }\n  }\n});",
              "err": {
                "message": "TypeError: _cartPage.cartPage.isProductAddedCorrect(...).isTotalCountCorrect is not a function",
                "estack": "TypeError: _cartPage.cartPage.isProductAddedCorrect(...).isTotalCountCorrect is not a function\n    at Context.eval (webpack://e2e_automationtest/./cypress/e2e/cart.cy.js:67:25)",
                "diff": null
              },
              "uuid": "3f422cd8-f992-473d-86ac-5961e13a4d5a",
              "parentUUID": "e1f38681-9bc0-4111-ae6e-61cfe1414a31",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Increase Product's Quantity from Cart page",
              "fullTitle": "Add To Cart Successfully Increase Product's Quantity from Cart page",
              "timedOut": null,
              "duration": 302,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@products\").then(products => {\n  let productList = products.inStockProduct;\n  var totalPrice = 0;\n  var totalProduct = 0;\n  for (let index = 0; index < productList.length; index++) {\n    const product = productList[index];\n    _productListPage.productListPage.clickAddProductToCart(product.name);\n    totalProduct = totalProduct + 1;\n    totalPrice = totalPrice + product.price;\n  }\n  _navBar.navBar.clickViewCart();\n  cy.wait(1000);\n  for (let index = 0; index < productList.length; index++) {\n    const product = productList[index];\n    let countProduct = 1;\n    for (let i = 0; i < product.quantity; i++) {\n      _cartPage.cartPage.clickAddProduct(product.name);\n      countProduct = countProduct + 1;\n      totalProduct = totalProduct + 1;\n      totalPrice = totalPrice + product.price;\n      cy.wait(400);\n      _cartPage.cartPage.isProductAddedCorrect(product, countProduct);\n      _navBar.navBar.isProductCountInCartCorrect(totalProduct);\n      _cartPage.cartPage.isTotalCountCorrect(totalProduct, totalPrice);\n    }\n  }\n});",
              "err": {
                "message": "TypeError: _productListPage.productListPage.clickAddProductToCart is not a function",
                "estack": "TypeError: _productListPage.productListPage.clickAddProductToCart is not a function\n    at Context.eval (webpack://e2e_automationtest/./cypress/e2e/cart.cy.js:87:32)",
                "diff": null
              },
              "uuid": "9f2e819d-22f8-421f-b932-0878880f2b4e",
              "parentUUID": "e1f38681-9bc0-4111-ae6e-61cfe1414a31",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bc481ff2-df46-4565-b6a8-9f3a2e5a3695",
            "3f422cd8-f992-473d-86ac-5961e13a4d5a",
            "9f2e819d-22f8-421f-b932-0878880f2b4e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2090,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "84e712bf-0ff5-4376-9968-20a7f8a8abf0",
          "title": "Remove From Cart Successfully",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Remove Product from Cart page",
              "fullTitle": "Remove From Cart Successfully Remove Product from Cart page",
              "timedOut": null,
              "duration": 419,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@products\").then(products => {\n  let productList = products.inStockProduct;\n  var totalPrice = 0;\n  var totalProduct = 0;\n  for (let index = 0; index < productList.length; index++) {\n    const product = productList[index];\n    totalProduct = totalProduct + product.quantity;\n    totalPrice = totalPrice + product.quantity * product.price;\n    for (let i = 0; i < product.quantity; i++) {\n      _productListPage.productListPage.clickAddProductToCart(product.name);\n      cy.wait(500);\n    }\n  }\n  _navBar.navBar.clickViewCart();\n  cy.wait(1000);\n  for (let index = 0; index < productList.length; index++) {\n    const product = productList[index];\n    _cartPage.cartPage.clickRemoveProduct(product.name);\n    if (product.quantity > 1) {\n      totalProduct = totalProduct - 1;\n      totalPrice = totalPrice - product.price;\n    }\n    ;\n    cy.wait(500);\n    _navBar.navBar.isProductCountInCartCorrect(totalProduct);\n    _cartPage.cartPage.isTotalCountCorrect(totalProduct, totalPrice);\n  }\n});",
              "err": {
                "message": "TypeError: _productListPage.productListPage.clickAddProductToCart is not a function",
                "estack": "TypeError: _productListPage.productListPage.clickAddProductToCart is not a function\n    at Context.eval (webpack://e2e_automationtest/./cypress/e2e/cart.cy.js:133:36)",
                "diff": null
              },
              "uuid": "2e36d448-e54e-4cbd-a6c0-f7461c6948a7",
              "parentUUID": "84e712bf-0ff5-4376-9968-20a7f8a8abf0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2e36d448-e54e-4cbd-a6c0-f7461c6948a7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 419,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4a68c6a3-f732-4eb3-9205-4d9df713d1a3",
          "title": "Can not add product to cart",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Out of stock",
              "fullTitle": "Can not add product to cart Out of stock",
              "timedOut": null,
              "duration": 4557,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@products\").then(products => {\n  _productListPage.productListPage.isOutOfStock('Adidas Fit Shirt').clickProduct('Adidas Fit Shirt');\n  cy.wait(500);\n  _productDetailPage.productDetailPage.isProductDisplayCorrect('Adidas Fit Shirt', 0, false, 250).isAddToCartBtnNotExist();\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Adidas Fit Shirt' within the element: <div.product-title.card-title> but never did.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find content: 'Adidas Fit Shirt' within the element: <div.product-title.card-title> but never did.\n    at Object.isOutOfStock (webpack://e2e_automationtest/./cypress/pages/productListPage.js:11:33)\n    at Context.eval (webpack://e2e_automationtest/./cypress/e2e/cart.cy.js:167:17)",
                "diff": null
              },
              "uuid": "5f12fe07-e288-4820-bed7-215e6ce2b828",
              "parentUUID": "4a68c6a3-f732-4eb3-9205-4d9df713d1a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Exceed the quantity in stock",
              "fullTitle": "Can not add product to cart Exceed the quantity in stock",
              "timedOut": null,
              "duration": 370,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@products\").then(products => {\n  let product = products.inStockProduct[2];\n  for (let index = 0; index <= product.stock; index++) {\n    _productListPage.productListPage.clickAddProductToCart(product.name);\n    cy.wait(200);\n  }\n  cy.acceptAlert(\"window:confirm\", \"Sorry. Product is out of stock\");\n  cy.wait(400);\n  _productListPage.productListPage.clickProduct(product.name);\n  cy.wait(500);\n  _productDetailPage.productDetailPage.clickAddToCart();\n  cy.acceptAlert(\"window:confirm\", \"Sorry. Product is out of stock\");\n  _navBar.navBar.clickViewCart();\n  cy.wait(500);\n  _cartPage.cartPage.isProductOutOfStock(product.name);\n});",
              "err": {
                "message": "TypeError: _productListPage.productListPage.clickAddProductToCart is not a function",
                "estack": "TypeError: _productListPage.productListPage.clickAddProductToCart is not a function\n    at Context.eval (webpack://e2e_automationtest/./cypress/e2e/cart.cy.js:181:32)",
                "diff": null
              },
              "uuid": "4d690e16-a4e7-4aed-9ac2-b13ff03517fe",
              "parentUUID": "4a68c6a3-f732-4eb3-9205-4d9df713d1a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5f12fe07-e288-4820-bed7-215e6ce2b828",
            "4d690e16-a4e7-4aed-9ac2-b13ff03517fe"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4927,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}